/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myhabittracker;

import com.formdev.flatlaf.FlatLightLaf;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;

/**
 *
 * @author asus
 */
public class DashboardHabit extends javax.swing.JFrame {

    private addHabit habitWindow;
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(DashboardHabit.class.getName());

    /**
     * Creates new form backScreen
     */
    
    public DashboardHabit() {
        initComponents();
        setLocationRelativeTo(null);
        Preferences prefs = Preferences.userNodeForPackage(this.getClass());
        setTitle("MyHabitsTracker");
        String savedPin = prefs.get("userPIN", null);
        if (savedPin == null) {
            jButtonSetupPin.setText("Set PIN");
        } else {
            jButtonSetupPin.setText("Reset PIN");
        }
        //icon sa myHabitsTracker
        // If no PIN exists, show setup button
        jButtonSetupPin.setVisible(true);

        // Restore last position and size if available
        int x = prefs.getInt("windowX", -1);
        int y = prefs.getInt("windowY", -1);
        int w = prefs.getInt("windowW", -1);
        int h = prefs.getInt("windowH", -1);

        if (x != -1 && y != -1 && w > 0 && h > 0) {
            setBounds(x, y, w, h);
        } else {
            pack(); // or leave the NetBeans-designed size
            setLocationRelativeTo(null);
        }

        // Save position & size on close
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                prefs.putInt("windowX", getX());
                prefs.putInt("windowY", getY());
                prefs.putInt("windowW", getWidth());
                prefs.putInt("windowH", getHeight());
            }
        });
        // Formatter for nice column header labels
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM dd");
        String[] columnNames = new String[7];
        columnNames[0] = "Habit";
        LocalDate today = LocalDate.now();
        for (int i = 0; i < 6; i++) {
            columnNames[i + 1] = today.minusDays(i).format(formatter);
        }

        // Set custom model with Boolean checkboxes
         jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][]{}, columnNames
        ) {
            Class[] types = new Class[]{
                String.class, Boolean.class, Boolean.class, Boolean.class,
                Boolean.class, Boolean.class, Boolean.class
            };
            public Class getColumnClass(int col) { return types[col]; }
        });
    }

public javax.swing.JTable getTable() {
    return jTable1; // or whatever the JTable variable is named
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        addHabit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        fileMenu = new javax.swing.JComboBox<>();
        jButtonSetupPin = new javax.swing.JButton();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addHabit.setText("Add Habit");
        addHabit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHabitActionPerformed(evt);
            }
        });

        jTable1.setPreferredSize(new java.awt.Dimension(1280, 720));
        jScrollPane2.setViewportView(jTable1);

        fileMenu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Options", "Export", "Import"}));
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        jButtonSetupPin.setText("Set pin");
        jButtonSetupPin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetupPinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addHabit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSetupPin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fileMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHabit)
                    .addComponent(fileMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSetupPin))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addHabitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHabitActionPerformed
        // TODO add your handling code here:
    String savedPin = PinPasswordHabit.getSavedPin();
    if (savedPin == null) {
        // No PIN yet → force setup
        new PinPasswordHabit("SETUP", this).setVisible(true);
    } else {
        // PIN exists → require unlock first
        new PinPasswordHabit("UNLOCK", this).setVisible(true);
    }
    this.setVisible(false); // hide dashboard until PIN check is done
    }//GEN-LAST:event_addHabitActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:
        String selected = (String) fileMenu.getSelectedItem();
        switch (selected) {
            case "Export" -> {
                exportHabits();
                fileMenu.setSelectedIndex(0); // reset
            }
            case "Import" -> {
                importHabits();
                fileMenu.setSelectedIndex(0); // reset
            }
            default -> {
                // do nothing
            }
        }
    }//GEN-LAST:event_fileMenuActionPerformed

    private void jButtonSetupPinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetupPinActionPerformed
        // TODO add your handling code here:
         int confirm = JOptionPane.showConfirmDialog(
        this,
        "Do you want to reset your PIN and security questions?",
        "Reset Confirmation",
        JOptionPane.YES_NO_OPTION
    );

    if (confirm == JOptionPane.YES_OPTION) {
        Preferences prefs = Preferences.userNodeForPackage(PinPasswordHabit.class);
        // remove PIN and the exact keys used by SecurityQuestionSetup
        prefs.remove("userPIN");
        prefs.remove("secQuestion");
        prefs.remove("secAnswer");

        JOptionPane.showMessageDialog(this,
            "Old PIN and security questions cleared. Let's set up your security questions first.");

        // Open the SecurityQuestionSetup window.
        // The SecurityQuestionSetup class already launches the PIN setup
        // after the user saves/verifies the security question.
        new SecurityQuestionSetup(null, this).setVisible(true);

        // hide dashboard while user sets up security Q + PIN
        this.setVisible(false);
    }
    }//GEN-LAST:event_jButtonSetupPinActionPerformed
    private void exportHabits() {
        JOptionPane.showMessageDialog(this, "Exporting habits...");
        // TODO: write table data to CSV/Excel
    }

    private void importHabits() {
        JOptionPane.showMessageDialog(this, "Importing habits...");
        // TODO: load table data from CSV/Excel
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            // Set FlatLaf Look and Feel
            javax.swing.UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, "Failed to initialize FlatLaf", ex);
        }
        //</editor-fold>

        /* Create and display the form */
         try {
        FlatLightLaf.setup();
    } catch (Exception ex) {
        logger.log(java.util.logging.Level.SEVERE, "Failed to initialize FlatLaf", ex);
    }

    java.awt.EventQueue.invokeLater(() -> {
        DashboardHabit dash = new DashboardHabit();
        Preferences prefs = Preferences.userNodeForPackage(DashboardHabit.class);
        String savedPin = prefs.get("userPIN", null);

        if (savedPin == null) {
            // First-time setup
            new PinPasswordHabit("SETUP", dash).setVisible(true);
        } else {
            // Require unlock
            new PinPasswordHabit("UNLOCK", dash).setVisible(true);
        }
        dash.setVisible(false);
    });
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addHabit;
    private javax.swing.JComboBox<String> fileMenu;
    private javax.swing.JButton jButtonSetupPin;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
